# This workflow will create a new release when it is called

name: Create release

on: 
  workflow_dispatch:
      
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Configure git for the maven release plugin
      run: |
        git config --global committer.email "noreply@github.com"
        git config --global committer.name "GitHub"
        git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global author.name "${GITHUB_ACTOR}"

    - name: Prepare release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mvn --batch-mode release:prepare -Dusername=$GITHUB_ACTOR -Dpassword=$GITHUB_TOKEN
        PROJECT_VERSION=`mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive  exec:exec`
        echo "::set-env name=RELEASE_VERSION::${PROJECT_VERSION}"
    - name: Perform release
      run: |
         mvn --batch-mode release:perform
         echo Aqu√≠ crearemos una nueva release con el fichero, version $RELEASE_VERSION, que se ha generado en la release

    - name: changelog
      uses: scottbrenner/generate-changelog-action@master
      id: Changelog
      env:
        REPO: ${{ github.repository }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.{{ $RELEASE_VERSION }}
        release_name: Release {{ $RELEASE_VERSION }}
        body: |
          ${{ steps.Changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/epl_librarian.jar
        asset_name: epl_librarian-{{ $RELEASE_VERSION }}.jar
        asset_content_type: application/jar
    
