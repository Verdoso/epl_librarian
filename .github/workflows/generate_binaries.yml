# This workflow will create new binaries when a release is created, and it attaches them to the release 

name: Generate binaries

on: 
  release:
    types: [released]      
  workflow_dispatch:
jobs:
  build:
    name: Generate executable - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-2019]
        os: [windows-2019]
        graalvm-version: ['22.3.1']
        java-version: ['17']
        include:
#          - os: ubuntu-latest
#            executable-suffix: ''
#            native-build-args: '-J-Xmx10g'
#          - os: macos-latest
#            executable-suffix: ''
#            native-build-args: '-J-Xmx10g'
          - os: windows-2019
            executable-suffix: '.exe'
            native-build-args: '-J-Xmx10g'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout release tag
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
           RELEASE_TAG=${{ github.event.release.tag_name }}
           CLEAN_RELEASE_TAG=`echo "${RELEASE_TAG//Release_Tag_}"`
           echo "CHECKOUT_TAG=${CLEAN_PROJECT_VERSION}" >> $GITHUB_ENV
           echo "Haciendo checkout del tag ${CLEAN_RELEASE_TAG}"
           git checkout ${CLEAN_RELEASE_TAG}
    
      - name: Find out version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
           PROJECT_VERSION=`mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive  exec:exec`
           CLEAN_PROJECT_VERSION=`echo "${PROJECT_VERSION%-SNAPSHOT}"`
           echo "RELEASE_VERSION=${CLEAN_PROJECT_VERSION}" >> $GITHUB_ENV
           echo "Generando release de la versiÃ³n ${CLEAN_PROJECT_VERSION}"
           echo "Basado en el checkout del tag ${CHECKOUT_TAG}"

      - id: executable
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          echo "name=epl_librarian-${{ runner.os }}-${{ env.RELEASE_VERSION }}-x86_64" >> $GITHUB_ENV

      - name: Preparing to create binary
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          echo env.name: ${{ env.name }}
          echo env.CHECKOUT_TAG: ${{ env.CHECKOUT_TAG }}
          echo env.RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
    
          